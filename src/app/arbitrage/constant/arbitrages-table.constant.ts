import {Arbitrage} from "../entity/arbitrage.entity";
import {Big} from "big.js";

export interface Table {
  title: string;
  isVisible: boolean;
  valueType: 'number' | 'date' | 'string' | 'enum' | 'currency';
  digitsInfo?: string;
  dateFormat?: string;
  showSort: boolean;
  sortFn: ((a: Arbitrage, b: Arbitrage) => number) | null;
  sortOrder: string;
  sortDirections: ('ascend' | 'descend' | null)[];
  showFilter: boolean;
  headerEllipsis: boolean;
  breakWord: boolean;
  headerAlign: string;
  width: string;
  columnKey: string;
  cellAlign: string;
  cellEllipsis: boolean;
}

export const arbitragesTableConstant: Table[] = [
  {
    title: 'Currency Base',
    isVisible: true,
    valueType: 'currency',
    showSort: false,
    sortFn: null,
    sortOrder: 'descend',
    sortDirections: ['ascend', 'descend', null],
    showFilter: false,
    headerEllipsis: false,
    breakWord: true,
    headerAlign: 'center',
    width: '48',
    columnKey: 'currencyBase',
    cellAlign: 'center',
    cellEllipsis: true
  }, {
    title: 'Buy order Id',
    isVisible: false,
    valueType: 'string',
    showSort: false,
    sortFn: null,
    sortOrder: 'descend',
    sortDirections: ['ascend', 'descend', null],
    showFilter: false,
    headerEllipsis: false,
    breakWord: true,
    headerAlign: 'center',
    width: '48',
    columnKey: 'buyOrderId',
    cellAlign: 'center',
    cellEllipsis: true
  }, {
    title: 'Sell order Id',
    isVisible: false,
    valueType: 'string',
    showSort: false,
    sortFn: null,
    sortOrder: 'descend',
    sortDirections: ['ascend', 'descend', null],
    showFilter: false,
    headerEllipsis: false,
    breakWord: true,
    headerAlign: 'center',
    width: '48',
    columnKey: 'sellOrderId',
    cellAlign: 'center',
    cellEllipsis: true
  }, {
    title: 'Profit',
    isVisible: true,
    valueType: 'number',
    digitsInfo: '1.2-5',
    showSort: true,
    sortFn: (a: Arbitrage, b: Arbitrage) => Big(a.profit).minus(b.profit).toNumber(),
    sortOrder: 'descend',
    sortDirections: ['ascend', 'descend', null],
    showFilter: false,
    headerEllipsis: false,
    breakWord: true,
    headerAlign: 'center',
    width: '48',
    columnKey: 'profit',
    cellAlign: 'center',
    cellEllipsis: true
  }, {
    title: 'Profit (USDT)',
    isVisible: true,
    valueType: 'number',
    digitsInfo: '1.2-3',
    showSort: true,
    sortFn: (a: Arbitrage, b: Arbitrage) => Big(a.profitUsdt).minus(b.profitUsdt).toNumber(),
    sortOrder: 'descend',
    sortDirections: ['ascend', 'descend', null],
    showFilter: false,
    headerEllipsis: false,
    breakWord: true,
    headerAlign: 'center',
    width: '48',
    columnKey: 'profitUsdt',
    cellAlign: 'center',
    cellEllipsis: true
  }, {
    title: 'Left Over Base',
    isVisible: false,
    valueType: 'string',
    showSort: true,
    sortFn: (a: Arbitrage, b: Arbitrage) => Big(a.leftOverBase ?? 0).minus(b.leftOverBase ?? 0).toNumber(),
    sortOrder: 'descend',
    sortDirections: ['ascend', 'descend', null],
    showFilter: false,
    headerEllipsis: false,
    breakWord: true,
    headerAlign: 'center',
    width: '48',
    columnKey: 'leftOverBase',
    cellAlign: 'center',
    cellEllipsis: true
  }, {
    title: 'Created At Cycle',
    isVisible: false,
    valueType: 'string',
    showSort: false,
    sortFn: null,
    sortOrder: 'descend',
    sortDirections: ['ascend', 'descend', null],
    showFilter: false,
    headerEllipsis: false,
    breakWord: true,
    headerAlign: 'center',
    width: '48',
    columnKey: 'createdAtCycle',
    cellAlign: 'center',
    cellEllipsis: true
  }, {
    title: 'Status',
    isVisible: true,
    valueType: 'enum',
    showSort: false,
    sortFn: null,
    sortOrder: 'descend',
    sortDirections: ['ascend', 'descend', null],
    showFilter: false,
    headerEllipsis: false,
    breakWord: true,
    headerAlign: 'center',
    width: '48',
    columnKey: 'status',
    cellAlign: 'center',
    cellEllipsis: true
  }, {
    title: 'Created At',
    isVisible: true,
    valueType: 'date',
    dateFormat: 'yy/M/d H:mm:s',
    showSort: true,
    sortFn: (a: Arbitrage, b: Arbitrage) => Big(a.createdAt?.getMilliseconds() ?? 0).minus(b.createdAt?.getMilliseconds() ?? 0).toNumber(),
    sortOrder: 'descend',
    sortDirections: ['ascend', 'descend', null],
    showFilter: false,
    headerEllipsis: false,
    breakWord: true,
    headerAlign: 'center',
    width: '48',
    columnKey: 'createdAt',
    cellAlign: 'center',
    cellEllipsis: true
  }, {
    title: 'Buy Placed At',
    isVisible: true,
    valueType: 'date',
    dateFormat: 'yy/M/d H:mm:s',
    showSort: true,
    sortFn: (a: Arbitrage, b: Arbitrage) => Big(a.buyPlacedAt?.getMilliseconds() ?? 0).minus(b.buyPlacedAt?.getMilliseconds() ?? 0).toNumber(),
    sortOrder: 'descend',
    sortDirections: ['ascend', 'descend', null],
    showFilter: false,
    headerEllipsis: false,
    breakWord: true,
    headerAlign: 'center',
    width: '48',
    columnKey: 'buyPlacedAt',
    cellAlign: 'center',
    cellEllipsis: true
  }, {
    title: 'Sell Placed At',
    isVisible: true,
    valueType: 'date',
    dateFormat: 'yy/M/d H:mm:s',
    showSort: true,
    sortFn: (a: Arbitrage, b: Arbitrage) => Big(a.sellPlacedAt?.getMilliseconds() ?? 0).minus(b.sellPlacedAt?.getMilliseconds() ?? 0).toNumber(),
    sortOrder: 'descend',
    sortDirections: ['ascend', 'descend', null],
    showFilter: false,
    headerEllipsis: false,
    breakWord: true,
    headerAlign: 'center',
    width: '48',
    columnKey: 'sellPlacedAt',
    cellAlign: 'center',
    cellEllipsis: true
  }, {
    title: 'Buy Filled At',
    isVisible: true,
    valueType: 'date',
    dateFormat: 'yy/M/d H:mm:s',
    showSort: true,
    sortFn: (a: Arbitrage, b: Arbitrage) => Big(a.buyFilledAt?.getMilliseconds() ?? 0).minus(b.buyFilledAt?.getMilliseconds() ?? 0).toNumber(),
    sortOrder: 'descend',
    sortDirections: ['ascend', 'descend', null],
    showFilter: false,
    headerEllipsis: false,
    breakWord: true,
    headerAlign: 'center',
    width: '48',
    columnKey: 'buyFilledAt',
    cellAlign: 'center',
    cellEllipsis: true
  }, {
    title: 'Buy Canceled At',
    isVisible: true,
    valueType: 'date',
    dateFormat: 'yy/M/d H:mm:s',
    showSort: true,
    sortFn: (a: Arbitrage, b: Arbitrage) => Big(a.buyCanceledAt?.getMilliseconds() ?? 0).minus(b.buyCanceledAt?.getMilliseconds() ?? 0).toNumber(),
    sortOrder: 'descend',
    sortDirections: ['ascend', 'descend', null],
    showFilter: false,
    headerEllipsis: false,
    breakWord: true,
    headerAlign: 'center',
    width: '48',
    columnKey: 'buyCanceledAt',
    cellAlign: 'center',
    cellEllipsis: true
  }, {
    title: 'Sell Filled At',
    isVisible: true,
    valueType: 'date',
    dateFormat: 'yy/M/d H:mm:s',
    showSort: true,
    sortFn: (a: Arbitrage, b: Arbitrage) => Big(a.sellFilledAt?.getMilliseconds() ?? 0).minus(b.sellFilledAt?.getMilliseconds() ?? 0).toNumber(),
    sortOrder: 'descend',
    sortDirections: ['ascend', 'descend', null],
    showFilter: false,
    headerEllipsis: false,
    breakWord: true,
    headerAlign: 'center',
    width: '48',
    columnKey: 'sellFilledAt',
    cellAlign: 'center',
    cellEllipsis: true
  }, {
    title: 'Sell Canceled At',
    isVisible: true,
    valueType: 'date',
    dateFormat: 'yy/M/d H:mm:s',
    showSort: true,
    sortFn: (a: Arbitrage, b: Arbitrage) => Big(a.sellCanceledAt?.getMilliseconds() ?? 0).minus(b.sellCanceledAt?.getMilliseconds() ?? 0).toNumber(),
    sortOrder: 'descend',
    sortDirections: ['ascend', 'descend', null],
    showFilter: false,
    headerEllipsis: false,
    breakWord: true,
    headerAlign: 'center',
    width: '48',
    columnKey: 'sellCanceledAt',
    cellAlign: 'center',
    cellEllipsis: true
  }, {
    title: 'Buy Target',
    isVisible: true,
    valueType: 'number',
    digitsInfo: '1.2-8',
    showSort: false,
    sortFn: null,
    sortOrder: 'descend',
    sortDirections: ['ascend', 'descend', null],
    showFilter: false,
    headerEllipsis: false,
    breakWord: true,
    headerAlign: 'center',
    width: '48',
    columnKey: 'buyTarget',
    cellAlign: 'center',
    cellEllipsis: true
  }, {
    title: 'Buy Volume',
    isVisible: true,
    valueType: 'number',
    digitsInfo: '1.0-3',
    showSort: true,
    sortFn: (a: Arbitrage, b: Arbitrage) => Big(a.buyVolume).minus(b.buyVolume).toNumber(),
    sortOrder: 'descend',
    sortDirections: ['ascend', 'descend', null],
    showFilter: false,
    headerEllipsis: false,
    breakWord: true,
    headerAlign: 'center',
    width: '48',
    columnKey: 'buyVolume',
    cellAlign: 'center',
    cellEllipsis: true
  }, {
    title: 'Buy Total (USDT)',
    isVisible: true,
    valueType: 'number',
    digitsInfo: '1.2-3',
    showSort: true,
    sortFn: (a: Arbitrage, b: Arbitrage) => Big(a.buyTotalUsdt).minus(b.buyTotalUsdt).toNumber(),
    sortOrder: 'descend',
    sortDirections: ['ascend', 'descend', null],
    showFilter: false,
    headerEllipsis: false,
    breakWord: true,
    headerAlign: 'center',
    width: '48',
    columnKey: 'buyTotalUsdt',
    cellAlign: 'center',
    cellEllipsis: true
  }, {
    title: 'Sell Target',
    isVisible: true,
    valueType: 'number',
    digitsInfo: '1.2-8',
    showSort: false,
    sortFn: null,
    sortOrder: 'descend',
    sortDirections: ['ascend', 'descend', null],
    showFilter: false,
    headerEllipsis: false,
    breakWord: true,
    headerAlign: 'center',
    width: '48',
    columnKey: 'sellTarget',
    cellAlign: 'center',
    cellEllipsis: true
  }, {
    title: 'Sell Volume',
    isVisible: true,
    valueType: 'number',
    digitsInfo: '1.2-8',
    showSort: true,
    sortFn: (a: Arbitrage, b: Arbitrage) => Big(a.sellVolume ?? 0).minus(b.sellVolume ?? 0).toNumber(),
    sortOrder: 'descend',
    sortDirections: ['ascend', 'descend', null],
    showFilter: false,
    headerEllipsis: false,
    breakWord: true,
    headerAlign: 'center',
    width: '48',
    columnKey: 'sellVolume',
    cellAlign: 'center',
    cellEllipsis: true
  }
];

export const dateFormats: { label: string, value: string }[] = [
  {label: 'default', value: 'yy/M/d H:mm:s'},
  {label: 'short', value: 'short'},
  {label: 'medium', value: 'medium'},
  {label: 'long', value: 'long'},
  {label: 'full', value: 'full'},
  {label: 'shortDate', value: 'shortDate'},
  {label: 'mediumDate', value: 'mediumDate'},
  {label: 'longDate', value: 'longDate'},
  {label: 'fullDate', value: 'fullDate'},
  {label: 'shortTime', value: 'shortTime'},
  {label: 'mediumTime', value: 'mediumTime'},
  {label: 'longTime', value: 'longTime'},
  {label: 'fullTime', value: 'fullTime'},
];
